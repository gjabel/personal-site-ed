<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chord diagram on Guy Abel</title>
    <link>/tags/chord-diagram/</link>
    <description>Recent content in chord diagram on Guy Abel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <copyright>&amp;copy; 2018 &amp;middot; Selected posts also on &lt;a href=&#34;https://r-bloggers.com/&#34;&gt;R-bloggers&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 04 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/chord-diagram/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Chord Diagram of Chinese Internal Migration Flows</title>
      <link>/post/chinese-migration-chord-diagram/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/chinese-migration-chord-diagram/</guid>
      <description>


&lt;p&gt;We have had a number of requests for the R code to replicate the plots in our &lt;a href=&#34;https://guyabel.com/publication/china-internal-migration-2010-15/&#34;&gt;paper&lt;/a&gt; on internal migration in China. The code below will produce a similar looking plot, but I have taken out some of the arguments that were very specific to our plot that will not replicate well for other data.&lt;/p&gt;
&lt;div id=&#34;data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data&lt;/h3&gt;
&lt;p&gt;The code is based on two data sets:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Bilateral flow data with three columns only (origin, destination and flow), see &lt;a href=&#34;https://github.com/gjabel/china-chord/blob/master/flow.csv&#34;&gt;here&lt;/a&gt; for the file used below&lt;/li&gt;
&lt;li&gt;Region details used for plotting, see &lt;a href=&#34;https://github.com/gjabel/china-chord/blob/master/region.csv&#34;&gt;here&lt;/a&gt; for the file used below&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note, the names in the region data are the same as the ones used in the origin and destination data.&lt;/p&gt;
&lt;p&gt;We can read in the data using &lt;code&gt;read_csv()&lt;/code&gt; in the readr package&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

d1 &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/gjabel/china-chord/master/flow.csv&amp;quot;) 
d1 &amp;lt;- mutate(d1, flow = flow/1e6)
d1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 961 x 3
##    orig           dest      flow
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Beijing        Beijing 0     
##  2 Tianjin        Beijing 0.0674
##  3 Hebei          Beijing 0.864 
##  4 Shanxi         Beijing 0.225 
##  5 Inner Mongolia Beijing 0.103 
##  6 Liaoning       Beijing 0.155 
##  7 Jilin          Beijing 0.105 
##  8 Heilongjiang   Beijing 0.194 
##  9 Shanghai       Beijing 0.0266
## 10 Jiangsu        Beijing 0.111 
## # ... with 951 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d2 &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/gjabel/china-chord/master/region.csv&amp;quot;)
d2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 31 x 6
##    name      region order colour    gap name_zh
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
##  1 Beijing   East       1 #B61416     2 &amp;lt;U+5317&amp;gt;&amp;lt;U+4EAC&amp;gt;   
##  2 Tianjin   East       2 #C01517     2 &amp;lt;U+5929&amp;gt;&amp;lt;U+6D25&amp;gt;   
##  3 Hebei     East       3 #CA1718     2 &amp;lt;U+6CB3&amp;gt;&amp;lt;U+5317&amp;gt;   
##  4 Shandong  East       4 #D4181A     2 &amp;lt;U+5C71&amp;gt;&amp;lt;U+4E1C&amp;gt;   
##  5 Jiangsu   East       5 #DE191B     2 &amp;lt;U+6C5F&amp;gt;&amp;lt;U+82CF&amp;gt;   
##  6 Shanghai  East       6 #E91A1C     2 &amp;lt;U+4E0A&amp;gt;&amp;lt;U+6D77&amp;gt;   
##  7 Zhejiang  East       7 #F31B1D     2 &amp;lt;U+6D59&amp;gt;&amp;lt;U+6C5F&amp;gt;   
##  8 Fujian    East       8 #FD1C1F     2 &amp;lt;U+798F&amp;gt;&amp;lt;U+5EFA&amp;gt;   
##  9 Guangdong East       9 #FF1E20     2 &amp;lt;U+5E7F&amp;gt;&amp;lt;U+4E1C&amp;gt;   
## 10 Hainan    East      10 #FF1F21     6 &amp;lt;U+6D77&amp;gt;&amp;lt;U+5357&amp;gt;   
## # ... with 21 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot&lt;/h3&gt;
&lt;p&gt;The code below plots the chord diagram without the default labels and axis for the &lt;code&gt;chordDiagram()&lt;/code&gt; function, that are added later in the &lt;code&gt;circos.track()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(circlize)

circos.clear()
circos.par(track.margin = c(0.01, -0.01), start.degree = 90, gap.degree = d2$gap)

chordDiagram(x = d1, order = d2$name, 
             grid.col = d2$colour, transparency = 0.25,
             directional = 1, direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;),
             link.arr.type = &amp;quot;big.arrow&amp;quot;, diffHeight = -0.04, 
             link.sort = TRUE, link.largest.ontop = TRUE, 
             annotationTrack = &amp;quot;grid&amp;quot;,
             preAllocateTracks = list(track.height = 0.25))

circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y) {
  s = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
  xx = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
  circos.text(x = mean(xx), y = 0.2, 
              labels = s, cex = 0.7, adj = c(0, 0.5),
              facing = &amp;quot;clockwise&amp;quot;, niceFacing = TRUE)
  circos.axis(h = &amp;quot;bottom&amp;quot;,
              labels.cex = 0.5,
              labels.pos.adjust = FALSE,
              labels.niceFacing = FALSE)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The legend is added using the &lt;code&gt;legend()&lt;/code&gt; function using the &lt;a href=&#34;http://colorbrewer2.org/#type=qualitative&amp;amp;scheme=Set1&amp;amp;n=4%5D&#34;&gt;Set1&lt;/a&gt; colour palette, that we used as the basis of regional shades in the colour column of &lt;code&gt;d2&lt;/code&gt;; see the &lt;a href=&#34;%5Bhttps://cran.r-project.org/web/packages/shades/index.html%5D&#34;&gt;shades&lt;/a&gt; package for creating palettes of similar colours.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;legend&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Legend&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(RColorBrewer)
legend(x = 0.7, y = 1.1, 
       legend = unique(d2$region), 
       fill = brewer.pal(n = 4, name = &amp;quot;Set1&amp;quot;), 
       bty = &amp;quot;n&amp;quot;, cex = 0.8,
       x.intersp = 0.5, 
       title = &amp;quot;   Region&amp;quot;, title.adj = 0) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;saving&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Saving&lt;/h3&gt;
&lt;p&gt;To save the image in a PDF plot surround the plotting code above between the &lt;code&gt;pdf()&lt;/code&gt; function and &lt;code&gt;dev.off()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pdf(file = &amp;quot;figure1.pdf&amp;quot;, width = 6, height = 6)

### insert code from above

dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;image-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Image Files&lt;/h3&gt;
&lt;p&gt;To convert the PDF to a PNG file I recommend the use of the &lt;a href=&#34;https://cran.r-project.org/web/packages/magick/&#34;&gt;magick&lt;/a&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magick)
p &amp;lt;- image_read_pdf(&amp;quot;figure1.pdf&amp;quot;)
image_write(image = p, path = &amp;quot;figure1.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;chinese-labels&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Chinese Labels&lt;/h3&gt;
&lt;p&gt;To replace the labels with their Chinese names, as in the plot above, replace the code for the &lt;code&gt;s&lt;/code&gt; object in the &lt;code&gt;circos.track()&lt;/code&gt; function to:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;    s = d2 %&amp;gt;% 
      filter(name == get.cell.meta.data(&amp;quot;sector.index&amp;quot;)) %&amp;gt;%
      select(name_zh) %&amp;gt;%
      pull()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might also need to add &lt;code&gt;family = &#34;GB1&#34;&lt;/code&gt; in the &lt;code&gt;pdf()&lt;/code&gt; function for Chinese characters to render in a PDF viewer.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Migrant Stock Chord Diagrams</title>
      <link>/post/migrant-stock-chord-digrams/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/migrant-stock-chord-digrams/</guid>
      <description>


&lt;p&gt;During the last few months I have given some introductory talks on international migration in Asia and Europe. I had a couple of requests to share the animated chord diagrams that I created for others to use in their teaching materials. These are below, along with some extra plots for Africa, the Americas (Northern, Central and Southern America as well as the Caribbean) and Oceania.&lt;/p&gt;
&lt;p&gt;The chords in the diagrams represent the connection between the places of birth (at the base of the chord) and places of residence (at the arrow head of the chord). The width of based of the chords correspond to the size of the migrant population in millions. Chords are ordered relative to their size, with the largest migrant stocks plotted at the beginning of the country segments. The ordering of chords jumps around over time as the relative rankings of the largest foreign-born populations change in each country. Values for the migrant population sizes are from the &lt;del&gt;2017&lt;/del&gt; 2019 revision of the United Nations DESA &lt;a href=&#34;https://www.un.org/en/development/desa/population/migration/data/estimates2/estimates19.asp&#34;&gt;International Migrant Stock Data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: you might have to right click, select show controls and hit play to start the animations depending on your browsers - right clicking can also allow you to access controls on the play back speed.&lt;/p&gt;
&lt;!-- ![ ](/img/anigif_original-14120-1449691023-4-2.mp4) --&gt;
&lt;video loop=&#34;loop&#34; width=&#34;720&#34; height=&#34;720&#34; poster=&#34;/img/ims-abel-asia.png&#34; controls&gt;
&lt;source src=&#34;../../img/ims-abel-asia.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;video loop=&#34;loop&#34; width=&#34;720&#34; height=&#34;720&#34; poster=&#34;/img/ims-abel-europe.png&#34; controls&gt;
&lt;source src=&#34;../../img/ims-abel-europe.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;video loop=&#34;loop&#34; width=&#34;720&#34; height=&#34;720&#34; poster=&#34;/img/ims-abel-africa.png&#34; controls&gt;
&lt;source src=&#34;../../img/ims-abel-africa.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;video loop=&#34;loop&#34; width=&#34;720&#34; height=&#34;720&#34; poster=&#34;/img/ims-abel-america.png&#34; controls&gt;
&lt;source src=&#34;../../img/ims-abel-america.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;video loop=&#34;loop&#34; width=&#34;720&#34; height=&#34;720&#34; poster=&#34;/img/ims-abel-oceania.png&#34; controls&gt;
&lt;source src=&#34;../../img/ims-abel-oceania.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;!-- ![ ](/img/abel-asia-ani10.gif) --&gt;
&lt;!-- ![ ](/img/abel-europe-ani10.gif) --&gt;
&lt;!-- ![ ](/img/abel-africa-ani10.gif) --&gt;
&lt;!-- ![ ](/img/abel-americas-ani10.gif) --&gt;
&lt;p&gt;The data in these plots represent migrant population totals, not period migration flows, hence the usual caveats associated with migrant stock data apply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Underlying migration flows might form different patterns as migrants might not be moving from their country of birth.&lt;/li&gt;
&lt;li&gt;Migrant populations can decrease from deaths as well as outward migration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As in my previous post on &lt;a href=&#34;http://guyabel.com/post/animated-directional-chord-diagrams/&#34;&gt;animated chord diagrams&lt;/a&gt; I used the &lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/index.html&#34;&gt;&lt;code&gt;circlize&lt;/code&gt;&lt;/a&gt; package in R to produce each chord diagrams for each frame of the animation and &lt;a href=&#34;https://cran.r-project.org/web/packages/tweenr/index.html&#34;&gt;&lt;code&gt;tweenr&lt;/code&gt;&lt;/a&gt; for the intermediate data. The country flags were added using the &lt;code&gt;circos.raster()&lt;/code&gt; function in circlize. I used &lt;a href=&#34;https://cran.r-project.org/web/packages/magick/index.html&#34;&gt;&lt;code&gt;magick&lt;/code&gt;&lt;/a&gt; to read in the multipage PDF file of plots over time and &lt;a href=&#34;https://cran.r-project.org/web/packages/animation/index.html&#34;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt; to produce the MP4 file. I am begining to prefer MP4 files to GIF as the file size are smaller - so quicker loading - and most browsers display MP4 videos with controls.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Animated Directional Chord Diagrams</title>
      <link>/post/animated-directional-chord-diagrams/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/animated-directional-chord-diagrams/</guid>
      <description>


&lt;div id=&#34;background&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;A little while ago my paper in &lt;em&gt;International Migration Review&lt;/em&gt; on global migration flow estimates came out &lt;a href=&#34;http://guyabel.com/publication/global-migration-estimates-by-gender/&#34;&gt;online&lt;/a&gt;. The paper includes a number of directional chord diagrams to visualize the estimates.&lt;/p&gt;
&lt;p&gt;Recently I have been playing around &lt;code&gt;tweenr&lt;/code&gt; and the &lt;code&gt;magick&lt;/code&gt; packages for animated population pyramids. In this post I attempt to show how to use these packages to produce animated directional chord diagrams of global migration flow estimates&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-prep&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Prep&lt;/h2&gt;
&lt;p&gt;The first step is to read into R two data frames (these are in my &lt;code&gt;migest&lt;/code&gt; R package if you wish to replicate the code below).&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Time series of bilateral migration flow estimates:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;migest&amp;quot;)
library(tidyverse)
d0 &amp;lt;- read_csv(system.file(&amp;quot;imr&amp;quot;, &amp;quot;reg_flow.csv&amp;quot;, package = &amp;quot;migest&amp;quot;))
d0 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 891 x 4
##    year0 orig_reg     dest_reg                         flow
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                           &amp;lt;dbl&amp;gt;
##  1  1960 Africa       Africa                        1377791
##  2  1960 Africa       Eastern Asia                     5952
##  3  1960 Africa       Eastern Europe &amp;amp; Central Asia    7303
##  4  1960 Africa       Europe                         919252
##  5  1960 Africa       Latin America &amp;amp; Caribbean       15796
##  6  1960 Africa       Northern America                82463
##  7  1960 Africa       Oceania                         32825
##  8  1960 Africa       Southern Asia                   35603
##  9  1960 Africa       Western Asia                   106580
## 10  1960 Eastern Asia Africa                          37301
## # ... with 881 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Some regional meta data for chord diagram plots:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d1 &amp;lt;- read_csv(system.file(&amp;quot;vidwp&amp;quot;, &amp;quot;reg_plot.csv&amp;quot;, package = &amp;quot;migest&amp;quot;))
d1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 5
##   region                        order1 col1    reg1           reg2          
##   &amp;lt;chr&amp;gt;                          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;         
## 1 Northern America                   1 #40A4D8 Northern       America       
## 2 Africa                             2 #33BEB7 Africa         &amp;lt;NA&amp;gt;          
## 3 Europe                             3 #B2C224 Europe         &amp;lt;NA&amp;gt;          
## 4 Eastern Europe &amp;amp; Central Asia      4 #FECC2F Eastern Europe &amp;amp; Central Asia
## 5 Western Asia                       5 #FBA127 Western        Asia          
## 6 Southern Asia                      6 #F66320 Southern       Asia          
## 7 Eastern Asia                       7 #DB3937 Eastern        Asia          
## 8 Oceania                            8 #A463D7 Oceania        &amp;lt;NA&amp;gt;          
## 9 Latin America &amp;amp; Caribbean          9 #0C5BCE Latin America  &amp;amp; Caribbean&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tween-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tween Data&lt;/h2&gt;
&lt;p&gt;The next step is to tween the data by migration corridor.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tweenr)

d2 &amp;lt;- d0 %&amp;gt;%
  mutate(corridor = paste(orig_reg, dest_reg, sep = &amp;quot; -&amp;gt; &amp;quot;)) %&amp;gt;%
  select(corridor, year0, flow) %&amp;gt;%
  mutate(ease = &amp;quot;linear&amp;quot;) %&amp;gt;%
  tween_elements(time = &amp;quot;year0&amp;quot;, group = &amp;quot;corridor&amp;quot;, ease = &amp;quot;ease&amp;quot;, nframes = 100) %&amp;gt;%
  tbl_df()
d2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,181 x 4
##    year0    flow .frame .group                                 
##    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                  
##  1  1960 1377791      0 Africa -&amp;gt; Africa                       
##  2  1960    5952      0 Africa -&amp;gt; Eastern Asia                 
##  3  1960    7303      0 Africa -&amp;gt; Eastern Europe &amp;amp; Central Asia
##  4  1960  919252      0 Africa -&amp;gt; Europe                       
##  5  1960   15796      0 Africa -&amp;gt; Latin America &amp;amp; Caribbean    
##  6  1960   82463      0 Africa -&amp;gt; Northern America             
##  7  1960   32825      0 Africa -&amp;gt; Oceania                      
##  8  1960   35603      0 Africa -&amp;gt; Southern Asia                
##  9  1960  106580      0 Africa -&amp;gt; Western Asia                 
## 10  1960   37301      0 Eastern Asia -&amp;gt; Africa                 
## # ... with 8,171 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates larger data frame &lt;code&gt;d2&lt;/code&gt;, with 100 observations for each corridor, one for each frame in the animation. In the original data &lt;code&gt;d0&lt;/code&gt; there are only 11 observations for each corridor, one for each five-year period.&lt;/p&gt;
&lt;p&gt;Then some further minor data wrangling is required to ready the data for plotting using the &lt;code&gt;chordDiagram&lt;/code&gt; function; namely the first three columns in the data must correspond to the origin, destination and flow.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d2 &amp;lt;- d2 %&amp;gt;%
  separate(col = .group, into = c(&amp;quot;orig_reg&amp;quot;, &amp;quot;dest_reg&amp;quot;), sep = &amp;quot; -&amp;gt; &amp;quot;) %&amp;gt;%
  select(orig_reg, dest_reg, flow, everything()) %&amp;gt;%
  mutate(flow = flow/1e06)
d2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,181 x 5
##    orig_reg     dest_reg                         flow year0 .frame
##    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                           &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
##  1 Africa       Africa                        1.38     1960      0
##  2 Africa       Eastern Asia                  0.00595  1960      0
##  3 Africa       Eastern Europe &amp;amp; Central Asia 0.00730  1960      0
##  4 Africa       Europe                        0.919    1960      0
##  5 Africa       Latin America &amp;amp; Caribbean     0.0158   1960      0
##  6 Africa       Northern America              0.0825   1960      0
##  7 Africa       Oceania                       0.0328   1960      0
##  8 Africa       Southern Asia                 0.0356   1960      0
##  9 Africa       Western Asia                  0.107    1960      0
## 10 Eastern Asia Africa                        0.0373   1960      0
## # ... with 8,171 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plots-for-each-frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plots for Each Frame&lt;/h2&gt;
&lt;p&gt;Now the data is in the correct format, chord diagrams can be produced for each frame of the eventual GIF. To do this, I used a &lt;code&gt;for&lt;/code&gt; loop to cycle through the tweend data. The arguments I used in the &lt;code&gt;circos.par&lt;/code&gt;, &lt;code&gt;chordDiagram&lt;/code&gt; and &lt;code&gt;circos.track&lt;/code&gt; functions to produce each plot are explained in more detail in the comments of the &lt;code&gt;migest&lt;/code&gt; &lt;a href=&#34;https://github.com/gjabel/migest/blob/master/demo/cfplot_reg2.R&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a directory to store the individual plots
dir.create(&amp;quot;./plot-gif/&amp;quot;)

library(circlize)
for(f in unique(d2$.frame)){
  # open a PNG plotting device
  png(file = paste0(&amp;quot;./plot-gif/globalchord&amp;quot;, f, &amp;quot;.png&amp;quot;), height = 7, width = 7, 
      units = &amp;quot;in&amp;quot;, res = 500)
  
  # intialise the circos plot
  circos.clear()
  par(mar = rep(0, 4), cex=1)
  circos.par(start.degree = 90, track.margin=c(-0.1, 0.1), 
             gap.degree = 4, points.overflow.warning = FALSE)

  # plot the chord diagram
  chordDiagram(x = filter(d2, .frame == f), directional = 1, order = d1$region,
               grid.col = d1$col1, annotationTrack = &amp;quot;grid&amp;quot;,
               transparency = 0.25,  annotationTrackHeight = c(0.05, 0.1),
               direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;), link.arr.type = &amp;quot;big.arrow&amp;quot;,
               diffHeight  = -0.04, link.sort = TRUE, link.largest.ontop = TRUE)
  
  # add labels and axis
  circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y) {
    xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
    sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
    reg1 = d1 %&amp;gt;% filter(region == sector.index) %&amp;gt;% pull(reg1)
    reg2 = d1 %&amp;gt;% filter(region == sector.index) %&amp;gt;% pull(reg2)
    
    circos.text(x = mean(xlim), y = ifelse(is.na(reg2), 3, 4),
                labels = reg1, facing = &amp;quot;bending&amp;quot;, cex = 1.1)
    circos.text(x = mean(xlim), y = 2.75, labels = reg2, facing = &amp;quot;bending&amp;quot;, cex = 1.1)
    circos.axis(h = &amp;quot;top&amp;quot;, labels.cex = 0.8
                labels.niceFacing = FALSE, labels.pos.adjust = FALSE)
  })
  
  # close plotting device
  dev.off()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-gif&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a GIF&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;magick&lt;/code&gt; package a GIF can be created by using the code below to&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read in an initial plot and then combine together all other images created above.&lt;/li&gt;
&lt;li&gt;Scale the combined images.&lt;/li&gt;
&lt;li&gt;Animate the combined images and save as a &lt;code&gt;.gif&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magick)

img &amp;lt;- image_read(path = &amp;quot;./plot-gif/globalchord0.png&amp;quot;)
for(f in unique(d2$.frame)[-1]){
  img0 &amp;lt;- image_read(path = paste0(&amp;quot;./plot-gif/globalchord&amp;quot;,f,&amp;quot;.png&amp;quot;))
  img &amp;lt;- c(img, img0)
  message(f)
}

img1 &amp;lt;- image_scale(image = img, geometry = &amp;quot;720x720&amp;quot;)

ani0 &amp;lt;- image_animate(image = img1, fps = 10)
image_write(image = ani0, path = &amp;quot;./plot-gif/globalchord.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives an output much like this minus the additional details in the corners:
&lt;img src=&#34;../../img/abel-ani10-gf-dist.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(might take a few seconds to fully load)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fixing-scales-in-chord-diagrams&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fixing Scales in Chord Diagrams&lt;/h2&gt;
&lt;p&gt;Whilst the plot above allows comparisons of the distributions of flows overtime it is more difficult to compare volumes. For such comparisons, Zuguang Gu &lt;a href=&#34;http://zuguang.de/circlize_book/book/advanced-usage-of-chorddiagram.html#compare-two-chord-diagrams&#34;&gt;suggests&lt;/a&gt; scaling the gaps between the sectors on the outside of the chord diagram. I wrote a little function that can do this for flow data arranged in a tidy format;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scale_gap &amp;lt;- function(flow_m, flow_max, gap_at_max = 1, gaps = NULL) {
  p &amp;lt;- flow_m / flow_max
  if(length(gap_at_max) == 1 &amp;amp; !is.null(gaps)) {
    gap_at_max &amp;lt;- rep(gap_at_max, gaps)
  }
  gap_degree &amp;lt;- (360 - sum(gap_at_max)) * (1 - p)
  gap_m &amp;lt;- (gap_degree + sum(gap_at_max))/gaps
  return(gap_m)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flow_m&lt;/code&gt; is the size of total flows in the matrix for the given year being re-scaled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flow_max&lt;/code&gt; is the maximum size of the flow matrix over all years&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gap_at_max&lt;/code&gt; is the size in degrees of the gaps in the flow matrix in the year where the flows are at their all time maximum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gaps&lt;/code&gt; is the number of gaps in the chord diagram (i.e. the number of regions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function can be used to derive the size of gaps in each frame for a new animated GIF.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d3 &amp;lt;- d2 %&amp;gt;%
  group_by(.frame) %&amp;gt;%
  summarise(flow = sum(flow)) %&amp;gt;%
  mutate(gaps = scale_gap(flow_m = flow, flow_max = max(.$flow), 
                          gap_at_max = 4, gaps = 9))

d3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 101 x 3
##    .frame  flow  gaps
##     &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1      0  17.6  25.9
##  2      1  17.8  25.7
##  3      2  18.1  25.6
##  4      3  18.3  25.4
##  5      4  18.5  25.2
##  6      5  18.7  25.1
##  7      6  18.9  24.9
##  8      7  19.1  24.7
##  9      8  19.3  24.6
## 10      9  19.6  24.4
## # ... with 91 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The calculations in &lt;code&gt;d3&lt;/code&gt; can then be plugged into the &lt;code&gt;for&lt;/code&gt; loop above, where the &lt;code&gt;circos.par()&lt;/code&gt; function is replaced by&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;circos.par(start.degree = 90, track.margin = c(-0.1, 0.1),
           gap.degree = filter(d3, .frame == f)$gaps, 
           points.overflow.warning = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the for loop has produced a new set of images, the same code to produce the GIF file can be run to obtain the animated chord diagrams with changing gaps;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/abel-ani10-gf-gap.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Whilst the sector axes are now fixed, I am not convinced that changing the relative gaps is the best way to compare volumes when using animated chord diagrams. The sectors of all regions - bar Northern America - are rotating making it hard follow their changes over time.&lt;/p&gt;
&lt;p&gt;Fortunately there is new &lt;code&gt;xmax&lt;/code&gt; option in &lt;code&gt;chordDiagram&lt;/code&gt; that can be used to fix the lengths of the x-axis for each sector using a named vector. In the context of producing an animation, the historic maximum migration flows (of combined immigration and emigration flows) in each region can be used, calculated from the original data &lt;code&gt;d0&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)

reg_max &amp;lt;- d0 %&amp;gt;%
  group_by(year0, orig_reg) %&amp;gt;%
  mutate(tot_out = sum(flow)) %&amp;gt;%
  group_by(year0, dest_reg) %&amp;gt;%
  mutate(tot_in = sum(flow)) %&amp;gt;%
  filter(orig_reg == dest_reg) %&amp;gt;%
  mutate(tot = tot_in + tot_out) %&amp;gt;%
  mutate(reg = orig_reg) %&amp;gt;%
  group_by(reg) %&amp;gt;%
  summarise(tot_max = max(tot)/1e06) %$%
  &amp;#39;names&amp;lt;-&amp;#39;(tot_max, reg)

reg_max&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                        Africa                  Eastern Asia 
##                     17.429942                     14.805479 
## Eastern Europe &amp;amp; Central Asia                        Europe 
##                      8.361300                     15.536978 
##     Latin America &amp;amp; Caribbean              Northern America 
##                      7.697638                     10.416927 
##                       Oceania                 Southern Asia 
##                      2.968412                     15.067631 
##                  Western Asia 
##                     15.072561&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;reg_max&lt;/code&gt; object can then be used in the &lt;code&gt;chordDiagram&lt;/code&gt; function in the &lt;code&gt;for&lt;/code&gt; loop above, replacing the original call with&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chordDiagram(x = filter(d2, .frame == f), directional = 1, order = d1$region,
             grid.col = d1$col1, annotationTrack = &amp;quot;grid&amp;quot;,
             transparency = 0.25,  annotationTrackHeight = c(0.05, 0.1),
             direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;), link.arr.type = &amp;quot;big.arrow&amp;quot;,
             diffHeight  = -0.04, link.sort = TRUE, link.largest.ontop = TRUE, 
             xmax = reg_max)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the complete code - the adapted &lt;code&gt;for&lt;/code&gt; loop to produce the images and then the &lt;code&gt;magick&lt;/code&gt; functions to compile the GIF - results in the following animation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/abel-ani10-gf-fix.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
