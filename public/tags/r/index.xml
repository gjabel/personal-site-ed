<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Guy Abel</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Guy Abel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <copyright>&amp;copy; 2018 &amp;middot; Selected posts also on &lt;a href=&#34;https://r-bloggers.com/&#34;&gt;R-bloggers&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 05 Jun 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/r/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Animating Changes in Football Kits using R</title>
      <link>/post/football-kits/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/football-kits/</guid>
      <description>


&lt;div id=&#34;background&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I’m loving the &lt;a href=&#34;https://cran.r-project.org/web/packages/magick/&#34;&gt;magick&lt;/a&gt; package at the moment. Reading through the &lt;a href=&#34;https://cran.r-project.org/web/packages/magick/vignettes/intro.html&#34;&gt;vignette&lt;/a&gt; I spotted the &lt;code&gt;image_morph()&lt;/code&gt; function. In this post I experiment with the function to build the GIF below that shows the changes in the England football first kit over time, using images from the excellent &lt;a href=&#34;http://www.historicalkits.co.uk/&#34;&gt;Historical Football Kits&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/abel-england.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scraping&lt;/h2&gt;
&lt;p&gt;The Historical Football Kits website has a detailed section on England kits spread over six pages, starting from the first outfits used in &lt;a href=&#34;http://www.historicalkits.co.uk/international/england/england-1872-1939.html&#34;&gt;1872&lt;/a&gt;. Each pages includes some interesting discussion - and importantly for this post - images of the kits.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;read_html()&lt;/code&gt; from the &lt;a href=&#34;https://cran.r-project.org/web/packages/xml2/&#34;&gt;xml2&lt;/a&gt; package and &lt;code&gt;map()&lt;/code&gt; from &lt;a href=&#34;https://cran.r-project.org/web/packages/purrr&#34;&gt;purrr&lt;/a&gt; to read and save the source code of each page.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(tidyverse)

htmls &amp;lt;- c( 
  &amp;quot;http://www.historicalkits.co.uk/international/england/england-1872-1939.html&amp;quot;,
  &amp;quot;http://www.historicalkits.co.uk/international/england/england-1946-1960.html&amp;quot;,
  &amp;quot;http://www.historicalkits.co.uk/international/england/england-1960-1983.html&amp;quot;,
  &amp;quot;http://www.historicalkits.co.uk/international/england/england-1984-1997.html&amp;quot;,
  &amp;quot;http://www.historicalkits.co.uk/international/england/england-1997-2010.html&amp;quot;,
  &amp;quot;http://www.historicalkits.co.uk/international/england/england-2010-2019.html&amp;quot;
) %&amp;gt;%
  map(read_html)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the source code we can then find the URLs of each kit image files using &lt;code&gt;html_nodes()&lt;/code&gt; and &lt;code&gt;html_attr()&lt;/code&gt; from &lt;a href=&#34;https://cran.r-project.org/web/packages/rvest/&#34;&gt;rvest&lt;/a&gt;. I used purrr’s &lt;code&gt;map_dfr()&lt;/code&gt; to store the links in a tibble and then dropped rows that do not contain kit image links or are images of away kits, kits used in single game or links to shops to buy replicas. This filtering was based on the image label or image URL and performed with the aid of the &lt;code&gt;str_detect()&lt;/code&gt; function from &lt;a href=&#34;https://cran.r-project.org/web/packages/stringr/&#34;&gt;stringr&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringr)

scrape_img_url &amp;lt;- function(html){
  html %&amp;gt;%
    html_nodes(&amp;quot;.float p , .float img&amp;quot;) %&amp;gt;%
    html_attr(&amp;quot;src&amp;quot;) %&amp;gt;%
    tbl_df() %&amp;gt;%
    set_names(&amp;quot;img_url&amp;quot;) %&amp;gt;%
    mutate(label = html %&amp;gt;% 
             html_nodes(&amp;quot;.float p , .float img&amp;quot;) %&amp;gt;%
             html_text() %&amp;gt;%
             c(., NA) %&amp;gt;%
             .[-1])
}

d1 &amp;lt;- htmls %&amp;gt;% 
  map_dfr(scrape_img_url) %&amp;gt;%
  filter(str_detect(string = img_url, pattern = &amp;quot;/international/england&amp;quot;),
         !str_detect(string = label, pattern = &amp;quot;change|alternate|Alternate|Change&amp;quot;),
         !str_detect(string = label, pattern = &amp;quot; v |Third&amp;quot;),
         !str_detect(string = img_url, pattern = &amp;quot;lithuania|italy|yellow|red&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(d1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                               img_url     label
## 1      /international/england/images/england-1872.gif      1872
## 2      /international/england/images/england-1882.gif 1879-1900
## 3      /international/england/images/england-1900.gif 1900-1914
## 4 /international/england/images/england-1920-1932.gif 1920-1930
## 5      /international/england/images/england-1921.gif 1930-1934
## 6      /international/england/images/england-1934.gif      1934&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given these URLs I then downloaded each of the images which are stored in a single R object &lt;code&gt;kits&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magick)

kits &amp;lt;- d1 %&amp;gt;%
  mutate(img_url = paste0(&amp;quot;http://www.historicalkits.co.uk&amp;quot;, img_url),
         img_url = str_replace(string =img_url, pattern =&amp;quot; &amp;quot;, replacement = &amp;quot;%20&amp;quot;)) %&amp;gt;%
  select(img_url) %&amp;gt;%
  map(image_read) %&amp;gt;%
  set_names(&amp;quot;img&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typing &lt;code&gt;kits&lt;/code&gt; into R will display each kit in the RStudio viewer (it will quickly run through each image). The console displays summary information for each image in the &lt;code&gt;kits&lt;/code&gt; object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&amp;gt; kits
$img
   format width height colorspace filesize
1     GIF   170    338       sRGB        0
2     GIF   170    338       sRGB        0
3     GIF   170    338       sRGB        0
4     GIF   170    338       sRGB        0
5     GIF   170    338       sRGB        0
6     GIF   170    338       sRGB        0
7     GIF   170    338       sRGB        0
8     GIF   170    338       sRGB        0
9     GIF   170    338       sRGB        0
10    GIF   170    338       sRGB        0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;annotating-images&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Annotating Images&lt;/h2&gt;
&lt;p&gt;Before creating any GIF I wanted add annotations for the year and the copyright information. To do this I first created a border using &lt;code&gt;image_border()&lt;/code&gt; in magick and then &lt;code&gt;image_annotate()&lt;/code&gt; to add the text. I wrapped these edits into an &lt;code&gt;add_text()&lt;/code&gt; function and then applied each to the kit images.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_text &amp;lt;- function(img, label){
  img %&amp;gt;%
    image_border(geometry = &amp;quot;10x60&amp;quot;, color = &amp;quot;white&amp;quot;) %&amp;gt;%
    image_chop(&amp;quot;0x45&amp;quot;) %&amp;gt;%
    image_annotate(text = label, gravity = &amp;quot;north&amp;quot;) %&amp;gt;%
    image_annotate(
      text = &amp;quot;Animation by @guyabelguyabel&amp;quot;, gravity = &amp;quot;south&amp;quot;, location = &amp;quot;+0+45&amp;quot;
    ) %&amp;gt;%
    image_annotate(
      text = &amp;quot;Images are Copyright of Historical\nFootball Kits and reproduced by\nkind permission.&amp;quot;,
      gravity = &amp;quot;south&amp;quot;
    )
}

for(i in 1:length(kits$img)){
  kits$img[i] &amp;lt;- add_text(img = kits$img[i], label = d1$label[i])
  # add extra border to make final images square
  kits$img[i] &amp;lt;- image_border(image = kits$img[i], geometry = &amp;quot;85x1&amp;quot;, color = &amp;quot;white&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-gif&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a GIF&lt;/h2&gt;
&lt;p&gt;The final step was to bind together the set of images in an animated GIF with smooth transition images between each frame. To do this I used the &lt;code&gt;image_morph()&lt;/code&gt; twice. First to repeat the same image so that the GIF would remain stable for a few frames (&lt;code&gt;kits_morph1&lt;/code&gt; below). Then again to create a set of morphing images between successive kits (&lt;code&gt;kits_morph0&lt;/code&gt; below). The full set of frames were stored in &lt;code&gt;kits_ani&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kits_ani &amp;lt;- image_morph(c(kits$img[1], kits$img[1]), frames = 4)
for(i in 2:length(kits$img)){
  kits_morph0 &amp;lt;- image_morph(c(kits$img[i-1], kits$img[i]), frames = 4)
  kits_morph1 &amp;lt;- image_morph(c(kits$img[i], kits$img[i]), frames = 4)
  kits_ani &amp;lt;- c(kits_ani, kits_morph0)
  kits_ani &amp;lt;- c(kits_ani, kits_morph1)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create an animation I passed the set of frames in the &lt;code&gt;kits_morph&lt;/code&gt; object to the &lt;code&gt;image_animate()&lt;/code&gt; and &lt;code&gt;image_write()&lt;/code&gt; functions to give the image above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kits_ani %&amp;gt;%
  image_animate(fps = 10) %&amp;gt;%
  image_write(path = &amp;quot;england.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This bit of code can take a while to execute if the are many frames (see my comments towards the end of the post).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;club-teams&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Club Teams&lt;/h2&gt;
&lt;p&gt;Similar code as above can be used to create images for club teams. I tried this out for the mighty Reading. As the Reading kits on &lt;a href=&#34;http://www.historicalkits.co.uk/Reading/Reading.htm&#34;&gt;Historical Football Kits&lt;/a&gt; are on only one page and includes only home kits, finding the image URLs was much easier…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d1 &amp;lt;- read_html(&amp;quot;http://www.historicalkits.co.uk/Reading/Reading.htm&amp;quot;) %&amp;gt;%
  scrape_img_url() %&amp;gt;%
  filter(str_detect(string = img_url, pattern = &amp;quot;/Reading&amp;quot;),
         !str_detect(string = img_url, pattern = &amp;quot;unknown&amp;quot;)) %&amp;gt;%
  mutate(
    label = str_replace_all(string = label,
                            pattern = &amp;quot;[:alpha:]|\\s&amp;quot;, 
                            replacement = &amp;quot;&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could then run the same code as above to scrape the images, annotate the year and copyright information and build the GIF.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/abel-reading.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ian Holloway - &lt;a href=&#34;https://www.getreading.co.uk/news/reading-berkshire-news/sky-sports-pundit-ian-holloway-12023342&#34;&gt;we had hoops first&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did have trouble creating a GIF’s when I used more frames to morph images between successive kits, for example when using &lt;code&gt;frames = 10&lt;/code&gt; in &lt;code&gt;image_morphi()&lt;/code&gt;. I could not consistently replicate the error, but I suspect it is something related to the memory size - my R session would freeze when passing &lt;code&gt;image_animate()&lt;/code&gt; or &lt;code&gt;image_write()&lt;/code&gt; on the &lt;code&gt;kits_ani&lt;/code&gt; R object when it contained a large number of images.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Animated Directional Chord Diagrams</title>
      <link>/post/animated-directional-chord-diagrams/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/animated-directional-chord-diagrams/</guid>
      <description>


&lt;div id=&#34;background&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;A little while ago my paper in &lt;em&gt;International Migration Review&lt;/em&gt; on global migration flow estimates came out &lt;a href=&#34;http://guyabel.com/publication/global-migration-estimates-by-gender/&#34;&gt;online&lt;/a&gt;. The paper includes a number of directional chord diagrams to visualize the estimates.&lt;/p&gt;
&lt;p&gt;Recently I have been playing around &lt;code&gt;tweenr&lt;/code&gt; and the &lt;code&gt;magick&lt;/code&gt; packages for animated population pyramids. In this post I attempt to show how to use these packages to produce animated directional chord diagrams of global migration flow estimates&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-prep&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Prep&lt;/h2&gt;
&lt;p&gt;The first step is to read into R two data frames (these are in my &lt;code&gt;migest&lt;/code&gt; R package if you wish to replicate the code below).&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Time series of bilateral migration flow estimates:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;migest&amp;quot;)
library(tidyverse)
d0 &amp;lt;- read_csv(system.file(&amp;quot;imr&amp;quot;, &amp;quot;reg_flow.csv&amp;quot;, package = &amp;quot;migest&amp;quot;))
d0 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 891 x 4
##    year0 orig_reg     dest_reg                         flow
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                           &amp;lt;dbl&amp;gt;
##  1  1960 Africa       Africa                        1377791
##  2  1960 Africa       Eastern Asia                     5952
##  3  1960 Africa       Eastern Europe &amp;amp; Central Asia    7303
##  4  1960 Africa       Europe                         919252
##  5  1960 Africa       Latin America &amp;amp; Caribbean       15796
##  6  1960 Africa       Northern America                82463
##  7  1960 Africa       Oceania                         32825
##  8  1960 Africa       Southern Asia                   35603
##  9  1960 Africa       Western Asia                   106580
## 10  1960 Eastern Asia Africa                          37301
## # ... with 881 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Some regional meta data for chord diagram plots:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d1 &amp;lt;- read_csv(system.file(&amp;quot;vidwp&amp;quot;, &amp;quot;reg_plot.csv&amp;quot;, package = &amp;quot;migest&amp;quot;))
d1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 5
##   region                        order1 col1    reg1           reg2          
##   &amp;lt;chr&amp;gt;                          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;         
## 1 Northern America                   1 #40A4D8 Northern       America       
## 2 Africa                             2 #33BEB7 Africa         &amp;lt;NA&amp;gt;          
## 3 Europe                             3 #B2C224 Europe         &amp;lt;NA&amp;gt;          
## 4 Eastern Europe &amp;amp; Central Asia      4 #FECC2F Eastern Europe &amp;amp; Central Asia
## 5 Western Asia                       5 #FBA127 Western        Asia          
## 6 Southern Asia                      6 #F66320 Southern       Asia          
## 7 Eastern Asia                       7 #DB3937 Eastern        Asia          
## 8 Oceania                            8 #A463D7 Oceania        &amp;lt;NA&amp;gt;          
## 9 Latin America &amp;amp; Caribbean          9 #0C5BCE Latin America  &amp;amp; Caribbean&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tween-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tween Data&lt;/h2&gt;
&lt;p&gt;The next step is to tween the data by migration corridor.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tweenr)

d2 &amp;lt;- d0 %&amp;gt;%
  mutate(corridor = paste(orig_reg, dest_reg, sep = &amp;quot; -&amp;gt; &amp;quot;)) %&amp;gt;%
  select(corridor, year0, flow) %&amp;gt;%
  mutate(ease = &amp;quot;linear&amp;quot;) %&amp;gt;%
  tween_elements(time = &amp;quot;year0&amp;quot;, group = &amp;quot;corridor&amp;quot;, ease = &amp;quot;ease&amp;quot;, nframes = 100) %&amp;gt;%
  tbl_df()
d2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,181 x 4
##    year0    flow .frame .group                                 
##    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                  
##  1  1960 1377791      0 Africa -&amp;gt; Africa                       
##  2  1960    5952      0 Africa -&amp;gt; Eastern Asia                 
##  3  1960    7303      0 Africa -&amp;gt; Eastern Europe &amp;amp; Central Asia
##  4  1960  919252      0 Africa -&amp;gt; Europe                       
##  5  1960   15796      0 Africa -&amp;gt; Latin America &amp;amp; Caribbean    
##  6  1960   82463      0 Africa -&amp;gt; Northern America             
##  7  1960   32825      0 Africa -&amp;gt; Oceania                      
##  8  1960   35603      0 Africa -&amp;gt; Southern Asia                
##  9  1960  106580      0 Africa -&amp;gt; Western Asia                 
## 10  1960   37301      0 Eastern Asia -&amp;gt; Africa                 
## # ... with 8,171 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates larger data frame &lt;code&gt;d2&lt;/code&gt;, with 100 observations for each corridor, one for each frame in the animation. In the original data &lt;code&gt;d0&lt;/code&gt; there are only 11 observations for each corridor, one for each five-year period.&lt;/p&gt;
&lt;p&gt;Then some further minor data wrangling is required to ready the data for plotting using the &lt;code&gt;chordDiagram&lt;/code&gt; function; namely the first three columns in the data must correspond to the origin, destination and flow.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d2 &amp;lt;- d2 %&amp;gt;%
  separate(col = .group, into = c(&amp;quot;orig_reg&amp;quot;, &amp;quot;dest_reg&amp;quot;), sep = &amp;quot; -&amp;gt; &amp;quot;) %&amp;gt;%
  select(orig_reg, dest_reg, flow, everything()) %&amp;gt;%
  mutate(flow = flow/1e06)
d2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,181 x 5
##    orig_reg     dest_reg                         flow year0 .frame
##    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                           &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
##  1 Africa       Africa                        1.38     1960      0
##  2 Africa       Eastern Asia                  0.00595  1960      0
##  3 Africa       Eastern Europe &amp;amp; Central Asia 0.00730  1960      0
##  4 Africa       Europe                        0.919    1960      0
##  5 Africa       Latin America &amp;amp; Caribbean     0.0158   1960      0
##  6 Africa       Northern America              0.0825   1960      0
##  7 Africa       Oceania                       0.0328   1960      0
##  8 Africa       Southern Asia                 0.0356   1960      0
##  9 Africa       Western Asia                  0.107    1960      0
## 10 Eastern Asia Africa                        0.0373   1960      0
## # ... with 8,171 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plots-for-each-frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plots for Each Frame&lt;/h2&gt;
&lt;p&gt;Now the data is in the correct format, chord diagrams can be produced for each frame of the eventual GIF. To do this, I used a &lt;code&gt;for&lt;/code&gt; loop to cycle through the tweend data. The arguments I used in the &lt;code&gt;circos.par&lt;/code&gt;, &lt;code&gt;chordDiagram&lt;/code&gt; and &lt;code&gt;circos.track&lt;/code&gt; functions to produce each plot are explained in more detail in the comments of the &lt;code&gt;migest&lt;/code&gt; &lt;a href=&#34;https://github.com/gjabel/migest/blob/master/demo/cfplot_reg2.R&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a directory to store the individual plots
dir.create(&amp;quot;./plot-gif/&amp;quot;)

library(circlize)
for(f in unique(d2$.frame)){
  # open a PNG plotting device
  png(file = paste0(&amp;quot;./plot-gif/globalchord&amp;quot;, f, &amp;quot;.png&amp;quot;), height = 7, width = 7, 
      units = &amp;quot;in&amp;quot;, res = 500)
  
  # intialise the circos plot
  circos.clear()
  par(mar = rep(0, 4), cex=1)
  circos.par(start.degree = 90, track.margin=c(-0.1, 0.1), 
             gap.degree = 4, points.overflow.warning = FALSE)

  # plot the chord diagram
  chordDiagram(x = filter(d2, .frame == f), directional = 1, order = d1$region,
               grid.col = d1$col1, annotationTrack = &amp;quot;grid&amp;quot;,
               transparency = 0.25,  annotationTrackHeight = c(0.05, 0.1),
               direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;), link.arr.type = &amp;quot;big.arrow&amp;quot;,
               diffHeight  = -0.04, link.sort = TRUE, link.largest.ontop = TRUE)
  
  # add labels and axis
  circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y) {
    xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
    sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
    reg1 = d1 %&amp;gt;% filter(region == sector.index) %&amp;gt;% pull(reg1)
    reg2 = d1 %&amp;gt;% filter(region == sector.index) %&amp;gt;% pull(reg2)
    
    circos.text(x = mean(xlim), y = ifelse(is.na(reg2), 3, 4),
                labels = reg1, facing = &amp;quot;bending&amp;quot;, cex = 1.1)
    circos.text(x = mean(xlim), y = 2.75, labels = reg2, facing = &amp;quot;bending&amp;quot;, cex = 1.1)
    circos.axis(h = &amp;quot;top&amp;quot;, labels.cex = 0.8
                labels.niceFacing = FALSE, labels.pos.adjust = FALSE)
  })
  
  # close plotting device
  dev.off()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-gif&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a GIF&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;magick&lt;/code&gt; package a GIF can be created by using the code below to&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read in an initial plot and then combine together all other images created above.&lt;/li&gt;
&lt;li&gt;Scale the combined images.&lt;/li&gt;
&lt;li&gt;Animate the combined images and save as a &lt;code&gt;.gif&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magick)

img &amp;lt;- image_read(path = &amp;quot;./plot-gif/globalchord0.png&amp;quot;)
for(f in unique(d2$.frame)[-1]){
  img0 &amp;lt;- image_read(path = paste0(&amp;quot;./plot-gif/globalchord&amp;quot;,f,&amp;quot;.png&amp;quot;))
  img &amp;lt;- c(img, img0)
  message(f)
}

img1 &amp;lt;- image_scale(image = img, geometry = &amp;quot;720x720&amp;quot;)

ani0 &amp;lt;- image_animate(image = img1, fps = 10)
image_write(image = ani0, path = &amp;quot;./plot-gif/globalchord.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives an output much like this minus the additional details in the corners:
&lt;img src=&#34;../../img/abel-ani10-gf-dist.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(might take a few seconds to fully load)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fixing-scales-in-chord-diagrams&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fixing Scales in Chord Diagrams&lt;/h2&gt;
&lt;p&gt;Whilst the plot above allows comparisons of the distributions of flows overtime it is more difficult to compare volumes. For such comparisons, Zuguang Gu &lt;a href=&#34;http://zuguang.de/circlize_book/book/advanced-usage-of-chorddiagram.html#compare-two-chord-diagrams&#34;&gt;suggests&lt;/a&gt; scaling the gaps between the sectors on the outside of the chord diagram. I wrote a little function that can do this for flow data arranged in a tidy format;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scale_gap &amp;lt;- function(flow_m, flow_max, gap_at_max = 1, gaps = NULL) {
  p &amp;lt;- flow_m / flow_max
  if(length(gap_at_max) == 1 &amp;amp; !is.null(gaps)) {
    gap_at_max &amp;lt;- rep(gap_at_max, gaps)
  }
  gap_degree &amp;lt;- (360 - sum(gap_at_max)) * (1 - p)
  gap_m &amp;lt;- (gap_degree + sum(gap_at_max))/gaps
  return(gap_m)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flow_m&lt;/code&gt; is the size of total flows in the matrix for the given year being re-scaled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flow_max&lt;/code&gt; is the maximum size of the flow matrix over all years&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gap_at_max&lt;/code&gt; is the size in degrees of the gaps in the flow matrix in the year where the flows are at their all time maximum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gaps&lt;/code&gt; is the number of gaps in the chord diagram (i.e. the number of regions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function can be used to derive the size of gaps in each frame for a new animated GIF.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d3 &amp;lt;- d2 %&amp;gt;%
  group_by(.frame) %&amp;gt;%
  summarise(flow = sum(flow)) %&amp;gt;%
  mutate(gaps = scale_gap(flow_m = flow, flow_max = max(.$flow), 
                          gap_at_max = 4, gaps = 9))

d3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 101 x 3
##    .frame  flow  gaps
##     &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1      0  17.6  25.9
##  2      1  17.8  25.7
##  3      2  18.1  25.6
##  4      3  18.3  25.4
##  5      4  18.5  25.2
##  6      5  18.7  25.1
##  7      6  18.9  24.9
##  8      7  19.1  24.7
##  9      8  19.3  24.6
## 10      9  19.6  24.4
## # ... with 91 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The calculations in &lt;code&gt;d3&lt;/code&gt; can then be plugged into the &lt;code&gt;for&lt;/code&gt; loop above, where the &lt;code&gt;circos.par()&lt;/code&gt; function is replaced by&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;circos.par(start.degree = 90, track.margin = c(-0.1, 0.1),
           gap.degree = filter(d3, .frame == f)$gaps, 
           points.overflow.warning = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the for loop has produced a new set of images, the same code to produce the GIF file can be run to obtain the animated chord diagrams with changing gaps;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/abel-ani10-gf-gap.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Whilst the sector axes are now fixed, I am not convinced that changing the relative gaps is the best way to compare volumes when using animated chord diagrams. The sectors of all regions - bar Northern America - are rotating making it hard follow their changes over time.&lt;/p&gt;
&lt;p&gt;Fortunately there is new &lt;code&gt;xmax&lt;/code&gt; option in &lt;code&gt;chordDiagram&lt;/code&gt; that can be used to fix the lengths of the x-axis for each sector using a named vector. In the context of producing an animation, the historic maximum migration flows (of combined immigration and emigration flows) in each region can be used, calculated from the original data &lt;code&gt;d0&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)

reg_max &amp;lt;- d0 %&amp;gt;%
  group_by(year0, orig_reg) %&amp;gt;%
  mutate(tot_out = sum(flow)) %&amp;gt;%
  group_by(year0, dest_reg) %&amp;gt;%
  mutate(tot_in = sum(flow)) %&amp;gt;%
  filter(orig_reg == dest_reg) %&amp;gt;%
  mutate(tot = tot_in + tot_out) %&amp;gt;%
  mutate(reg = orig_reg) %&amp;gt;%
  group_by(reg) %&amp;gt;%
  summarise(tot_max = max(tot)/1e06) %$%
  &amp;#39;names&amp;lt;-&amp;#39;(tot_max, reg)

reg_max&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                        Africa                  Eastern Asia 
##                     17.429942                     14.805479 
## Eastern Europe &amp;amp; Central Asia                        Europe 
##                      8.361300                     15.536978 
##     Latin America &amp;amp; Caribbean              Northern America 
##                      7.697638                     10.416927 
##                       Oceania                 Southern Asia 
##                      2.968412                     15.067631 
##                  Western Asia 
##                     15.072561&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;reg_max&lt;/code&gt; object can then be used in the &lt;code&gt;chordDiagram&lt;/code&gt; function in the &lt;code&gt;for&lt;/code&gt; loop above, replacing the original call with&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chordDiagram(x = filter(d2, .frame == f), directional = 1, order = d1$region,
             grid.col = d1$col1, annotationTrack = &amp;quot;grid&amp;quot;,
             transparency = 0.25,  annotationTrackHeight = c(0.05, 0.1),
             direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;), link.arr.type = &amp;quot;big.arrow&amp;quot;,
             diffHeight  = -0.04, link.sort = TRUE, link.largest.ontop = TRUE, 
             xmax = reg_max)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the complete code - the adapted &lt;code&gt;for&lt;/code&gt; loop to produce the images and then the &lt;code&gt;magick&lt;/code&gt; functions to compile the GIF - results in the following animation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/abel-ani10-gf-fix.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
